Why do I need a SSH key?

You can not have access to a private oder secured repository without a "Acces Token -HTTPS" or a "SSH-Key". A SSH key is only valuable on a single System. So if you want access
with two Computers you need two SSH-Keys! 
How to create a SSH key on Linux and how to implement it in GIT:

There are different keys this tutorial describes the type ED25519:

1.  check if there is already a SSH-Key on your Computer: ls -al ~/.ssh
    you should have a SSH-key in following file-type: id_dsa.pub, id_ecdsa.pub, id_ed25519.pub, id_rsa.pub
2.  if not create one: ssh-keygen -ed25519 -C "the email which is connected with your GIT account"
    then you should just press enter on the displayed default place where the .pub file will be saved
    then you have to use a passphrase (=password)
3. In the saved .pub file you find your SSH-key you have to copy it (with the email!!) and use it as a SSH Key in your GitHUB/LAB account

---------------------------------------------------------------------------------------------------------------------------------------------
WINDOWS GIT BASH:

Set up SSH for Git on Windows
Use this section to create a default identity and SSH key when you're using Git on Windows. By default, the system adds keys for all identities to the /Users/<username>/.ssh directory.

Step 1. Set up your default identity
    From the command line, enter ssh-keygen.

    (For Windows 7 or earlier)

    You can only enter ssh-keygen into the Git Bash window. It won't work in the Command prompt.

    The command prompts you for a file to save the key in:

    $ ssh-keygen 
    Generating public/private rsa key pair.
    Enter file in which to save the key (/c/Users/emmap1/.ssh/id_rsa):     

2. Press enter to accept the default key and path,/c/Users/<username>/.ssh/id_rsa.

    We recommend keeping the default key name unless you have a reason to change it. To create a key with a non-default name or path, specify the full path to the key. For             example, to create a key called my-new-ssh-key, enter the Windows path, shown here:

    $ ssh-keygen 
    Generating public/private rsa key pair.
    Enter file in which to save the key (/c/Users/emmap1/.ssh/id_rsa): c:\Users\emmap1\.ssh\my-new-ssh-key     

3. Enter and re-enter a passphrase when prompted.

The command creates your default identity with its public and private keys. The whole interaction looks similar to this:

    $ ssh-keygen 
    Generating public/private rsa key pair.
    Enter file in which to save the key (/c/Users/emmap1/.ssh/id_rsa):
    Created directory '/c/Users/emmap1/.ssh'.
    Enter passphrase (empty for no passphrase):
    Enter same passphrase again:
    Your identification has been saved in /c/Users/emmap1/.ssh/id_rsa.
    Your public key has been saved in /c/Users/emmap1/.ssh/id_rsa.pub.
    The key fingerprint is: e7:94:d1:a3:02:ee:38:6e:a4:5e:26:a3:a9:f4:95:d4 emmap1@EMMA-PC     

4. List the contents of .ssh to view the key files.

    You should see something like the following:

    $ dir .ssh 
    id_rsa  id_rsa.pub     

    The command displays two files, one for the public key (for example id_rsa.pub) and one for the private key (for example, id_rsa). 

    Step 2. Add the key to the ssh-agent
    If you don't want to type your password each time you use the key, you'll need to add it to the ssh-agent.

    To start the agent, run the following:

    $ eval $(ssh-agent) 
    Agent pid 9700      

    Enter ssh-add followed by the path to the private key file:

    $ ssh-add ~/.ssh/<private_key_file>      

     Step 3. Add the public key to your Account settings
    From Bitbucket, choose Personal settings from your avatar in the lower left.

    Click SSH keys. If you've already added keys, you'll see them on this page.

    Open your .ssh/id_rsa.pub file (or whatever you named the public key file) and copy its contents.
    You may see an email address on the last line. It doesn't matter whether or not you include the email address.

    From Bitbucket, click Add key.

    Enter a Label for your new key, for example, Default public key.

    Paste the copied public key into the SSH Key field.

    Click Save.
    Bitbucket sends you an email to confirm the addition of the key.

    Return to the command line and verify your configuration and username by entering the following command:

    $ ssh -T git@bitbucket.org       

    The command message tells you which of your Bitbucket accounts can log in with that key.


    
            conq: logged in as emmap1.
            You can use git or hg to connect to Bitbucket. Shell access is disabled.

    If you get an error message with Permission denied (publickey), check the Troubleshoot SSH issues page for help.

    Now that you've got an SSH key set up, use the SSH URL the next time you clone a repository. If you already have a repository that you cloned over HTTPS, change the remote     URL for your repository to its SSH URL.
    
