Why do I need a SSH key?

You can not have access to a private oder secured repository without a "Acces Token -HTTPS" or a "SSH-Key". A SSH key is only valuable on a single System. So if you want access
with two Computers you need two SSH-Keys! 
How to create a SSH key on Linux and how to implement it in GIT:

There are different keys this tutorial describes the type ED25519:

1.  check if there is already a SSH-Key on your Computer: ls -al ~/.ssh
    you should have a SSH-key in following file-type: id_dsa.pub, id_ecdsa.pub, id_ed25519.pub, id_rsa.pub
2.  if not create one: ssh-keygen -ed25519 -C "the email which is connected with your GIT account"
    then you should just press enter on the displayed default place where the .pub file will be saved
    then you have to use a passphrase (=password)
3. In the saved .pub file you find your SSH-key you have to copy it (with the email!!) and use it as a SSH Key in your GitHUB/LAB account

---------------------------------------------------------------------------------------------------------------------------------------------
WINDOWS GIT BASH:

Set up SSH for Git on Windows
Use this section to create a default identity and SSH key when you're using Git on Windows. By default, the system adds keys for all identities to the /Users/<username>/.ssh directory.

Step 1. Set up your default identity
    From the command line, enter ssh-keygen.

    (For Windows 7 or earlier)

    You can only enter ssh-keygen into the Git Bash window. It won't work in the Command prompt.

    The command prompts you for a file to save the key in:

    $ ssh-keygen -t rsa -C “your-email-address” 
        -t stands for ‘type’ and rsa is type of encryption
        -C is for comment
    Generating public/private rsa key pair.
    Enter file in which to save the key (/c/Users/emmap1/.ssh/id_rsa):     

2. Press enter to accept the default key and path,/c/Users/<username>/.ssh/id_rsa.

    We recommend keeping the default key name unless you have a reason to change it. To create a key with a non-default name or path, specify the full path to the key. For             example, to create a key called my-new-ssh-key, enter the Windows path, shown here:

    $ ssh-keygen 
    Generating public/private rsa key pair.
    Enter file in which to save the key (/c/Users/emmap1/.ssh/id_rsa): c:\Users\emmap1\.ssh\my-new-ssh-key     

3. Enter and re-enter a passphrase when prompted.

The command creates your default identity with its public and private keys. The whole interaction looks similar to this:

    $ ssh-keygen 
    Generating public/private rsa key pair.
    Enter file in which to save the key (/c/Users/emmap1/.ssh/id_rsa):
    Created directory '/c/Users/emmap1/.ssh'.
    Enter passphrase (empty for no passphrase):
    Enter same passphrase again:
    Your identification has been saved in /c/Users/emmap1/.ssh/id_rsa.
    Your public key has been saved in /c/Users/emmap1/.ssh/id_rsa.pub.
    The key fingerprint is: e7:94:d1:a3:02:ee:38:6e:a4:5e:26:a3:a9:f4:95:d4 emmap1@EMMA-PC     

4. List the contents of .ssh to view the key files.

    You should see something like the following:

    $ dir .ssh 
    id_rsa  id_rsa.pub     

    The command displays two files, one for the public key (for example id_rsa.pub) and one for the private key (for example, id_rsa). 

    Step 2. Add the key to the ssh-agent
    If you don't want to type your password each time you use the key, you'll need to add it to the ssh-agent.

    To start the agent, run the following:

    $ eval $(ssh-agent) 
    Agent pid 9700      

    Enter ssh-add followed by the path to the private key file:

    $ ssh-add ~/.ssh/<private_key_file>      

     Step 3. Add the public key to your Account settings
    From Bitbucket, choose Personal settings from your avatar in the lower left.

    Click SSH keys. If you've already added keys, you'll see them on this page.

    Open your .ssh/id_rsa.pub file (or whatever you named the public key file) and copy its contents.
    You may see an email address on the last line. It doesn't matter whether or not you include the email address.

    From Bitbucket, click Add key.

    Enter a Label for your new key, for example, Default public key.

    Paste the copied public key into the SSH Key field.

    Click Save.
    Bitbucket sends you an email to confirm the addition of the key.

    Return to the command line and verify your configuration and username by entering the following command:

    $ ssh -T git@bitbucket.org       

    The command message tells you which of your Bitbucket accounts can log in with that key.


    
            conq: logged in as emmap1.
            You can use git or hg to connect to Bitbucket. Shell access is disabled.

    If you get an error message with Permission denied (publickey), check the Troubleshoot SSH issues page for help.

    Now that you've got an SSH key set up, use the SSH URL the next time you clone a repository. If you already have a repository that you cloned over HTTPS, change the remote     URL for your repository to its SSH URL.
    
    
    
    
    How to have 2 or more GitHub accounts on one machine (Windows)
Linh Nguyen My
Linh Nguyen My

Jan 26, 2018·5 min read


Say you have a work and a personal GitHub account. You’re working on one machine and have several projects, some of which you want to push to your personal account or vice versa. This is where you can use SSH keys so that you don’t have to keep re-entering your username and password to identify yourself. What you do is you generate a SSH key. When you do this you get a pair, one being public and the other private. The public one is what you provide to GitHub and the private one stays on your computer. The changes you push will only be allowed when they keys match.
The other day I had such a pain setting this up. I’ve documented these steps so that it’ll be easy for anyone to do it themselves. Note that I did this on a Windows machine lol.
Without further ado, here are the steps to add SSH keys to your GitHub.
    1. Navigate to the directory in which you want to push your changes to a different GitHub account.
    2. Create a new SSH key in your terminal/command line
        For windows I use
        ssh-keygen -t rsa -C “your-email-address”
        -t stands for ‘type’ and rsa is type of encryption
        -C is for comment
    3. The following will then show:
        Generating public/private rsa key pair.
        Enter file in which to save the key (/c/Users/your_username/.ssh/id_rsa):
        
        Copy and paste the path followed by an identifiable name for the file:
        /c/Users/your_username/.ssh/id_rsa_IDENTIFIABLE_NAME_HERE
        
        I named my one test for the sake of this tutorial:
        /c/Users/your_username/.ssh/id_rsa_test
        
        Make sure you don’t override id_rsa as this is your existing key for your original account.
        
        It will then ask you for the following:
        
        Enter passphrase (empty for no passphrase):
        Enter same passphrase again:
        Press ‘Enter’ twice to leave it blank.
        
        You can now type in the following command to see all the SSH keys you have on your local machine:
            ls -al ~/.ssh
                ls lists all the files in the current directory
                a is for listing all files including hidden ones
                l is for listing in a long format
        You should then get something similar to this:
            total 46
            drwxr-xr-x 1 your_username 1049089    0 Jan 26 10:40 .
            drwxr-xr-x 1 your_username 1049089    0 Jan 23 12:12 ..
            -rw-r--r-- 1 your_username 1049089 3326 Nov 30 11:21 id_rsa
            -rw-r--r-- 1 your_username 1049089  748 Nov 30 11:21 id_rsa.pub
            -rw-r--r-- 1 your_username 1049089 1675 Jan 26 10:40 id_rsa_test
            -rw-r--r-- 1 your_username 1049089  399 Jan 26 10:40 id_rsa_test.pub
            -rw-r--r-- 1 your_username 1049089  803 Nov 30 12:08 known_hosts
            
        You should be able to see your new SSH key file. As you can see in my one I have both id_rsa_test and id_rsa_test.pub.
        id_rsa_test is your private key stored on your machine, whilst id_rsa_test.pub is the public key which you will provide GitHub with.
        Next you need to copy the SSH key which is stored in id_rsa_test.pub file. You can open this in text editor of your choice. I am currently using atom so I opened the               file using the following command:
            atom ~/.ssh/id_rsa_test.pub
        You will then get something similar to this:
"ssh-rsa                                 AAAAB3NzaC1yc2EAAAADAQABAAABAQDEmSbc7ms4SNIf7G0e9EqdrQRTB17VFTqRtCbQ55sSc11xZP5B07UXf9+................a955cf1GUzsNIr60E7VuVxirrr+K2WcleqifnDEg1H/VbyJtEekh4Aav9csBwemTz3 test@test.com"
        The key is actually longer but I shortened it for the sake of this tutorial.
        Copy this and navigate to your GitHub account → Settings → SSH and GPG keys

        Click on New SSH key

        Give your new key a title and then paste the new generated SSH key you copied before. It is a good idea to name your keys after the machine they’re from. As you can see        I have three, Macbook, Windows and Cloud9 IDE.
        
        If you’re on a Mac you should be able to add this key on your terminal as well using the command below:
            ssh-add ~/.ssh/id_rsa_test
            
        However because I was using a Windows machine, I had to create a SSH command. You can do this by typing the following directly into the command line:
            git config core.sshCommand=ssh -i ~/.ssh/id_rsa_test
        or you can do it by opening the git config file in your favourite text editor:
            git config -e
        Your local git config file should look something like this:

        Add sshCommand = ssh -i ~/.ssh/id_ra_test to the core list.
        Note: if you want the command git config -e to be opening your file in the text editor of your choice, you need to have configured it globally. Mine opened up in Vim as        this the default setting. You can override it using the following command:
        git config --global core.editor "atom --wait"
        Other editor commands can be found here.
        3. Set your repository to be pushed to GitHub with the associated account.
        You also need to change your user email and name to reflect the GitHub account you want the repo to be associated with. You can change this in the config file whilst you           have it open:

        Alternatively you can also do this via the command line:
        git config user.name "test"
        git config user.email test@test.com
    4. You should now be able to commit and push.
        git init
        git add .
        git commit -m "First commit"
        git remote add origin git@github.com:your_username/test.git
        git push origin master
        Thanks a lot to Samir, James and Tomasz from codebar for helping me with this!
        Hope this helps!
